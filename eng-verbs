pain driven development
	let your needs and your pain drive your development

tighten your feedback loop

work on your efficiency with your tools. they donâ€™t directly help you in your development, but the more comfortable you are with your tools, the more you can focus. not through narrowing your focus but removing unnecessary stuff from your window

pair programming is good, bc both speed each other up

the less precise you have to be the better
  (aka "not having to aim")

Cultivate Your Impatience
 - for the things that break your flow
 - for machines, software, for the number of steps it takes you to do something
 - this is not for people, you should have deep patience for the people around you, that's a part of kindness, which is a virtue
 - These are hard to recognize, because those things are often habits and we
   even optimize for them (we get good at repeating the steps, even though we'd
   be better off eliminating them -- I see this as related to obsessive compulsive
   behaviors)

make small changes, commit working code often so you have a progression + easy to revert to last working code
	smaller change = less to debug!

shared tools = increased productivity
	(remove things in your window of focus)

hit the biggest unknown with all your effort

trust people to write good software, don't trust people to do what the software does
	(e.g. testing)
	machines are good at doing what machines are built to do, people do repeated tasks poorly

tech + process + people

make sure your code runs before you commmit anything...

before you try anything new
    check the state of the world
    have an expectation of what will happen
    have a plan to verify what happened

always save your state- you can binary search from your last working state to troubleshoot

git commit messages should convey intent

deleting data is a sin

racecar drivers don't take their hands off the steering wheel- don't take your hands off the home row!
